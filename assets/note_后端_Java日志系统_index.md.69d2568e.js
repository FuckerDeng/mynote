import{_ as s,o as n,c as a,O as l}from"./chunks/framework.c70c7723.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/后端/Java日志系统/index.md","lastUpdated":1684818232000}'),p={name:"note/后端/Java日志系统/index.md"},o=l(`<h2 id="log4j2中appender-logger-root-关系" tabindex="-1">log4j2中Appender/Logger/Root 关系 <a class="header-anchor" href="#log4j2中appender-logger-root-关系" aria-label="Permalink to &quot;log4j2中Appender/Logger/Root 关系&quot;">​</a></h2><p>挂网：<a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noreferrer">https://logging.apache.org/log4j/2.x/</a> 本文来源：<a href="https://blog.csdn.net/HongZeng_CSDN/article/details/130094219" target="_blank" rel="noreferrer">https://blog.csdn.net/HongZeng_CSDN/article/details/130094219</a></p><p>在Log4j2中，Appender和Logger是两个核心组件，它们在日志记录过程中扮演着不同的角色。</p><h3 id="_1-appender-附加器" tabindex="-1">1.Appender（附加器）： <a class="header-anchor" href="#_1-appender-附加器" aria-label="Permalink to &quot;1.Appender（附加器）：&quot;">​</a></h3><blockquote><p>Appender负责将日志输出到特定的目标。</p></blockquote><p>例如，将日志记录输出到控制台、文件、数据库等。在Log4j2中，有许多预定义的Appender，如ConsoleAppender（控制台输出）、FileAppender（文件输出）、RollingFileAppender（滚动文件输出）、SocketAppender（网络输出）等。你可以根据需求选择相应的Appender，或者自定义实现Appender。</p><p>Appender的配置通常包括输出格式（如PatternLayout）、滚动策略、触发策略等。例如，在Log4j2的XML配置文件中，一个简单的FileAppender配置如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">appenders</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!--        name:appender的名字；tartget：SYSTEM_OUT或SYSTEM_ERR，通常设为SYSTEM_OUT；--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- =======================================用来定义输出到控制台的配置======================================= --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Console</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Console</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">target</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SYSTEM_OUT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ThresholdFilter</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">level</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${console_print_level}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onMatch</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ACCEPT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onMismatch</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DENY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!-- 设置输出格式,不设置默认为:%m%n --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">PatternLayout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">pattern</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${console_log_pattern}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Console</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">appenders</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-logger-记录器" tabindex="-1">2.Logger（记录器）： <a class="header-anchor" href="#_2-logger-记录器" aria-label="Permalink to &quot;2.Logger（记录器）：&quot;">​</a></h3><blockquote><p>Logger负责捕捉日志事件，并将它们传递给适当的Appender。 每个Logger都有一个日志级别（如DEBUG、INFO、WARN、ERROR和CRITICAL），只有当日志事件的级别大于或等于Logger的级别时，才会将事件传递给Appender。这样，我们可以控制不同级别的日志事件是否被记录。</p></blockquote><p>Logger通常有一个名字，表示它与特定的类或包相关联。在Java代码中，我们通常根据当前类创建一个Logger实例，如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Logger</span><span style="color:#A6ACCD;"> log </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LoggerFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getLogger</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Sub1Log</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在Log4j2的配置文件中，我们可以为不同的Logger设置日志级别，以及关联的Appender。例如：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">loggers</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">logger</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.df.spring_look.log.sub1.sub2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">level</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">additivity</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">appender-ref</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Console</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">logger</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">logger</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.df.spring_look.log.sub1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">level</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">additivity</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">appender-ref</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Console</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">logger</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">logger</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.df.spring_look.log</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">level</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">warn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">additivity</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">appender-ref</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Console</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">logger</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!-- 设置打印sql语句配置结束 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!--建立一个默认的root的logger--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">root</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">level</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DEBUG</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">appender-ref</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Console</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">root</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">loggers</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>总结一下，Logger负责捕捉和筛选日志事件，而Appender负责将日志事件输出到特定目标。在Log4j2的配置中，我们需要定义Appender，然后将Appender关联到相应的Logger，从而实现灵活的日志记录策略。</p><p>普通logger 与 root的关系 在Log4j2中，Logger之间存在一种层次结构。普通Logger（也称为非Root Logger或自定义Logger）都是Root Logger的子Logger。Root Logger是Logger层次结构的顶层记录器，它是所有Logger的父类。</p><p>普通Logger根据名称和包路径进行组织。例如，一个名为com.example.MyClass的普通Logger与名为com.example的包相关联。这种层次结构允许我们为不同的包或类设置不同的日志级别和Appender。</p><p>Root Logger的主要作用是提供默认的日志级别和Appender设置。当一个普通Logger没有显式地设置级别或Appender时，它会继承Root Logger的设置。</p><p>这是一个简化的Logger层次结构示意图：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Root Logger</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- com.example(package)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- com.example.MyClass1(class)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- com.example.MyClass2(class)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   ┖-- ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- com.example.subpackage(package)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- com.example.subpackage.MyClass3(class)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- ┖-- ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    ┖-- ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><pre><code>Properties：定义其他部分都会用到的功能属性
appenders：定义日志的输出位置，内置了ConsoleAppender（控制台输出）、FileAppender（文件输出）、RollingFileAppender（滚动文件输出）、
    SocketAppender（网络输出）等，也可以自定义实现
loggers：定义不同包下产生的日志分配给哪个appender处理
    一个类产生日志后，先通过输出时所在类路径到配置表查找能匹配的logger，没找到，则向上一个包路径名进行查找，直到
    找到匹配的logger或root logger
    比如：com.example.A.class产生的日志，先通过com.example.A.class查找名字匹配的logger，找不到，再通过com.example
    进行查找，依次向上查找，如果com都查不到，就使用root logger，通过root logger里定义的日志级别和appender进行日志
    分发处理
    根据此查找原理实现了日志的不同处理
</code></pre><p>总结一下，Log4j2是通过类路径（包路径）来查找和匹配Logger的。这样可以让我们针对不同的包和类设置不同的日志策略。</p>`,22),e=[o];function r(t,c,D,F,y,i){return n(),a("div",null,e)}const A=s(p,[["render",r]]);export{C as __pageData,A as default};
